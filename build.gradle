buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "org.spongepowered.mixin"

mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
}

version = "${project.minecraft}-${project.modVersion}"
group = "com.teamabnormals"
archivesBaseName = project.modId

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: "official", version: "1.17.1"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            arg "-mixin.config=" + project.modId + ".mixins.json"
            arg "-mixin.config=" + "blueprint_test.mixins.json"
            mods {
                blueprint {
                    source sourceSets.main
                }
                blueprint_test {
                    source sourceSets.test
                }
            }
        }
        server {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            arg "-mixin.config=" + project.modId + ".mixins.json"
            arg "-mixin.config=" + "blueprint_test.mixins.json"
            mods {
                blueprint {
                    source sourceSets.main
                }
                blueprint_test {
                    source sourceSets.test
                }
            }
        }
        data {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            args "--mod", project.modId, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources")
            mods {
                blueprint {
                    source sourceSets.main
                }
                blueprint_test {
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://maven.jaackson.me"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft}-${project.forge}"

    // Push mixin to the game module
    implementation fg.deobf("me.jaackson:mixin-hack:1.0.0")
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : "Team Abnormals",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : project.modVersion,
                "Implementation-Vendor"   : "Team Abnormals",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : project.modId + ".mixins.json"
        ])
    }
    finalizedBy 'reobfJar'
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        if (project.hasProperty("jacksonMavenUser") && project.hasProperty("jacksonMavenPass")) {
            maven {
                url "https://maven.jaackson.me"
                credentials {
                    username = project.properties.jacksonMavenUser
                    password = project.properties.jacksonMavenPass
                }
            }
        }
    }
}